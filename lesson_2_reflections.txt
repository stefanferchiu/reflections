What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized Git starts tracking the files in that repository - like making a census of the files to be tracked from now on.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is like a preambule for both the working directory and the repository. It can contain files from outside the working directory but does not include all the files from the working directory. It contains the files that will be coomited to the repository.

How can you use the staging area to make sure you have one commit per logical change?

The file(s) that are changed should be moved to the staging area and using git diff --staged we can see if the changes introduced are following the rule of 'one commit per logical change'.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when trying different things, like new experimental features and versions, to the core project, thus making sure that this does not affect the main version.

How do the diagrams help you visualize the branch structure?

It is more easy to see the exact places new branches were made, making it easier for future use.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The resulting branch has the code from both branches. It is represented like this because it has 2 parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros are that almost everything is automatised, being done by Git, which also verifies everything; the cons are that sometime what you want and what Git wants is different.